#ifndef EFI_H
#define EFI_H

#ifdef SYSTEMC
#include <systemc.h>
#endif

#include <iostream>
#include <string>
#include "FreeRTOS.h"
#include "GlobalDefines.hpp"
#include "Engine.hpp"
#include "CKP.hpp"
#include "CLT.hpp"
#include "EGO.hpp"
#include "MAP.hpp"
#include "MAT.hpp"
#include "TPS.hpp"

//=================================================

#ifdef SYSTEMC
#include <systemc.h>

using namespace sc_core;

class EFI : public sc_module {

private:

	bool checkEngineLight;

public:
	static float RPM;
	static float ignitionTime;
	static float BTDC;
	static int crankCounter;
	static string stroke;
	static bool allowedInjection;
	static bool allowedIgnition;

	// Sensors
	MAP MAPSensor;
	MAT MATSensor;
	CLT CLTSensor;
	TPS TPSSensor;
	EGO EGOSensor;
	CKP CKPSensor;

	SC_CTOR(EFI);

	void run();

	bool getCheckEngineLight();

	bool setCheckEngineLight(bool checkEngineLight);

	void turnOnFIC();

	void turnOffFIC();

	void turnOnIC();

	void turnOffIC();

	void crankTick();

	void allowInject();

	void allowIgnite();

	void checkSensor();

	void updateTable();

};

//=================================================

#else

using namespace std;

class EFI {

private:

	bool checkEngineLight;

public:
	static float RPM;
	static float ignitionTime;
	static float BTDC;
	static int crankCounter;
	static string stroke;
	static bool allowedInjection;
	static bool allowedIgnition;

	// Sensors
	MAP MAPSensor;
	MAT MATSensor;
	CLT CLTSensor;
	TPS TPSSensor;
	EGO EGOSensor;
	CKP CKPSensor;

	EFI();

	void run();

	bool getCheckEngineLight();

	bool setCheckEngineLight(bool checkEngineLight);

	void turnOnFIC();

	void turnOffFIC();

	void turnOnIC();

	void turnOffIC();

	void crankTick();

	void allowInject();

	void allowIgnite();

	void checkSensor();

	void updateTable();

};

#endif

//=================================================

#endif
