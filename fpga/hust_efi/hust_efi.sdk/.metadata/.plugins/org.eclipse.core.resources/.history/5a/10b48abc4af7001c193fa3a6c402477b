/***************************** Include Files *********************************/
#include <iostream>
#include "FreeRTOS.h"
#include "../include/GlobalDefines.hpp"
#include "../include/EFI.hpp"
#include "efi_virtual_input.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xil_printf.h"

/************************** Constant Definitions *****************************/
#define INPUT_REG_ADDR     0x41210000
#define OUTPUT_REG_ADDR    0x41210000
#define CRANK_COUNTER_ADDR 0x41220000

/************************** Variable Definitions *****************************/
XGpio Gpio1; /* The Instance of the GPIO Driver for input_reg and output_reg */
XGpio Gpio2; /* The Instance of the GPIO Driver for crank_counter */

using namespace std;

int main()
{
	EFI* efi = new EFI();

	int Status1;
	int Status2;

	Status1 = XGpio_Initialize(&Gpio1, XPAR_AXI_GPIO_1_DEVICE_ID);
	if (Status1 != XST_SUCCESS) {
		xil_printf("Gpio1 Initialization Failed\r\n");
		return XST_FAILURE;
	}
	Status2 = XGpio_Initialize(&Gpio1, XPAR_AXI_GPIO_2_DEVICE_ID);
	if (Status2 != XST_SUCCESS) {
		xil_printf("Gpio2 Initialization Failed\r\n");
		return XST_FAILURE;
	}

	XGpio_SetDataDirection(&Gpio1, 1, 0x00);
	XGpio_SetDataDirection(&Gpio1, 2, 0xFF);
	XGpio_SetDataDirection(&Gpio2, 1, 0xFF);

	xTaskCreate();
	xTaskCreate();



	return 0;
}
