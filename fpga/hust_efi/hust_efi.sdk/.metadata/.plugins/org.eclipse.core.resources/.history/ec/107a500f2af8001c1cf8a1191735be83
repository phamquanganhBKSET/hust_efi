/***************************** Include Files *********************************/
#include <iostream>
#include <random>
#include "FreeRTOS.h"
#include "task.h"
#include "../include/GlobalDefines.hpp"
#include "../include/EFI.hpp"
#include "../lib/sdCard.h"
#include "efi_virtual_input.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xil_printf.h"

/************************** Variable Definitions *****************************/
XGpio Gpio1; /* The Instance of the GPIO Driver for input_reg and output_reg */
XGpio Gpio2; /* The Instance of the GPIO Driver for crank_counter */

void vTaskInput(void*);
void vTaskProcess(void* parameter);

using namespace std;

union {
	float f;
	u32 u;
} number;

int main()
{
	int status = SD_Init();
	if (status != XST_SUCCESS) {
		cout << "SD card init failed!";
		return 0;
	}
	cout << "SD card init successfully!" << endl;

	cout << "Initializing EFI...\n";
	EFI* efi = new EFI();

	int Status1;
	int Status2;

	cout << "Initializing GPIO1...\n";
	Status1 = XGpio_Initialize(&Gpio1, XPAR_AXI_GPIO_1_DEVICE_ID);
	if (Status1 != XST_SUCCESS) {
		cout << "Gpio1 Initialization Failed\r\n";
		return XST_FAILURE;
	}
	cout << "Initializing GPIO2...\n";
	Status2 = XGpio_Initialize(&Gpio2, XPAR_AXI_GPIO_2_DEVICE_ID);
	if (Status2 != XST_SUCCESS) {
		cout << "Gpio2 Initialization Failed\r\n";
		return XST_FAILURE;
	}
	cout << "\nDone initializing GPIO\n";

	cout << "\nChannel 1 of Gpio1 is " <<  XGpio_GetDataDirection(&Gpio1, 1);
	cout << "\nChannel 2 of Gpio1 is " <<  XGpio_GetDataDirection(&Gpio1, 2);
	cout << "\nChannel 1 of Gpio2 is " <<  XGpio_GetDataDirection(&Gpio2, 1);

	xTaskCreate( vTaskInput, "Task Input", 2048, NULL, 1, NULL );
	xTaskCreate( vTaskProcess, "Task Process", 2048, (void*)efi, 1, NULL );

	vTaskStartScheduler();

	return 0;
}

void vTaskInput(void*) {
	cout << "\nCreate TaskInput successfully!\n";
	volatile unsigned int *virtual_input = (volatile unsigned int *) 0x43c00000;
	const TickType_t xDelay = 2 / portTICK_PERIOD_MS;
	while(1) {
//		cout << "\n******************************\n\r";
//		cout << "* User Peripheral Write Test\n\r";
//		cout << "******************************\n\n\r";

		/*
		* Write to user logic slave module register(s) and read back
		*/
//		cout << "User logic slave module test...\n\r";

		number.f = MAP_VFROM + static_cast<float>(rand()) * static_cast<float>(MAP_VTO - MAP_VFROM) / RAND_MAX;
//		cout << "MAP = " << number.f << "\n\r";
		virtual_input[0] = number.u;

		number.f = MAT_VFROM + static_cast<float>(rand()) * static_cast<float>(MAT_VTO - MAT_VFROM) / RAND_MAX;
//		cout << "MAT = " << number.f << "\n\r";
		virtual_input[1] = number.u;

		number.f = CLT_VFROM + static_cast<float>(rand()) * static_cast<float>(CLT_VTO - CLT_VFROM) / RAND_MAX;
//		cout << "CLT = " << number.f << "\n\r";
		virtual_input[2] = number.u;

		number.f = EGO_VFROM + static_cast<float>(rand()) * static_cast<float>(EGO_VTO - EGO_VFROM) / RAND_MAX;
//		cout << "EGO = " << number.f << "\n\r";
		virtual_input[3] = number.u;

//		if(i++ > 20) {
//			cout << endl << "Stop";
//			break;
//		}

		vTaskDelay( xDelay );
	}
}

void vTaskProcess(void* parameter) {
	cout << "\nCreate TaskProcess successfully!\n";
	EFI* efi = (EFI*)parameter;
	int i = 0;
	const TickType_t xDelay = 3 / portTICK_PERIOD_MS;
	float btdc[4] = {0, 0, 0, 0};
	bool done[4] = {0, 0, 0, 0};
	bool btdc_ready[4] = {0, 0, 0, 0};
	while(1) {
//		vTaskDelay( xDelay );
//		cout << "******************************\n\r";
//		cout << "* User Peripheral Read Test\n\r";
//		cout << "******************************\n\n\r";
//		efi->checkSensor();
//		if(i++ > 20) {
//			cout << endl << "Dung";
//			break;
//		}
		u32 output_reg = XGpio_DiscreteRead(&Gpio1, 1);
		u32 crank_cycle_counter = output_reg >> 14;
		bool cal_rpm = (output_reg >> 13) & 0x01;
		bool cal_btdc = (output_reg >> 12) & 0x01;
		u8 cal_injection = (output_reg >> 8) & 0x0F;
		u8 update_table = (output_reg >> 4) & 0x0F;
		u8 cal_ignition = output_reg & 0x0F;

		u32 crank_counter = XGpio_DiscreteRead(&Gpio2, 1);

		if (cal_rpm) {
			float rpm = efi->calculateRPM(crank_cycle_counter);
			cout << "\nCalculate RPM: RPM = " << rpm << endl;
			efi->setRPM(rpm);
		}

		if (cal_btdc) {
			btdc[0] = efi->calculateBTDC(crank_counter);
			btdc[1] = btdc[0] + 180;
			btdc[2] = btdc[0] + 180;
			btdc[3] = btdc[0];
		}

		// Calculate injection time
		if ((cal_injection) & 0x01) {
			efi->checkSensor();
			efi->FIC[0].setInjectionTime(efi->calculateInjectionTime(efi->CLTSensor.getData(), efi->EGOSensor.getData(),
										 efi->MATSensor.getData(), efi->MAPSensor.getData(), efi->getRPM()));
			cout << "\nCalculate injection time for cylinder 0: inj_time = " << efi->FIC[0].getInjectionTime();
			cout << "\nInjecting..." << endl;
			efi->FIC[0].inject();
			cout << "\nDone inject" << endl;
			done[0] = 1;
		} else {
			done[0] = 0;
		}

		if ((cal_injection) & 0x02) {
			efi->checkSensor();
			efi->FIC[1].setInjectionTime(efi->calculateInjectionTime(efi->CLTSensor.getData(), efi->EGOSensor.getData(),
													 efi->MATSensor.getData(), efi->MAPSensor.getData(), efi->getRPM()));
			cout << "\nCalculate injection time for cylinder 1: inj_time = " << efi->FIC[1].getInjectionTime();
			cout << "\nInjecting..." << endl;
			efi->FIC[1].inject();
			cout << "\nDone inject" << endl;
			done[1] = 1;
		} else {
			done[1] = 0;
		}

		if ((cal_injection) & 0x04) {
			efi->checkSensor();
			efi->FIC[2].setInjectionTime(efi->calculateInjectionTime(efi->CLTSensor.getData(), efi->EGOSensor.getData(),
													 efi->MATSensor.getData(), efi->MAPSensor.getData(), efi->getRPM()));
			cout << "\nCalculate injection time for cylinder 2: inj_time = " << efi->FIC[2].getInjectionTime();
			cout << "\nInjecting..." << endl;
			efi->FIC[2].inject();
			cout << "\nDone inject" << endl;
			done[2] = 1;
		} else {
			done[2] = 0;
		}

		if ((cal_injection) & 0x08) {
			efi->checkSensor();
			efi->FIC[3].setInjectionTime(efi->calculateInjectionTime(efi->CLTSensor.getData(), efi->EGOSensor.getData(),
													 efi->MATSensor.getData(), efi->MAPSensor.getData(), efi->getRPM()));
			cout << "\nCalculate injection time for cylinder 3: inj_time = " << efi->FIC[3].getInjectionTime();
			cout << "\nInjecting..." << endl;
			efi->FIC[3].inject();
			cout << "\nDone inject" << endl;
			done[3] = 1;
		} else {
			done[3] = 0;
		}

		// Update table
		if ((update_table) & 0x01) {
			efi->checkSensor();
			efi->updateTable(0);
		}

		if ((update_table) & 0x02) {
			efi->checkSensor();
			efi->updateTable(1);
		}

		if ((update_table) & 0x04) {
			efi->checkSensor();
			efi->updateTable(2);
		}

		if ((update_table) & 0x08) {
			efi->checkSensor();
			efi->updateTable(3);
		}


		// Calculate ignition time
		if ((cal_ignition & 0x01)) {
			efi->checkSensor();
			efi->IC[0].setIgnitionTime(efi->calculateInjectionTime(efi->CLTSensor.getData(), efi->EGOSensor.getData(),
																   efi->MATSensor.getData(), efi->MAPSensor.getData(), efi->getRPM()));
			cout << "\nCalculate ignition time for cylinder 0: ig_time = " << efi->IC[0].getIgnitionTime();
		}

		if ((cal_ignition & 0x02)) {
			efi->checkSensor();
			efi->IC[1].setIgnitionTime(efi->calculateInjectionTime(efi->CLTSensor.getData(), efi->EGOSensor.getData(),
																   efi->MATSensor.getData(), efi->MAPSensor.getData(), efi->getRPM()));
			cout << "\nCalculate ignition time for cylinder 1: ig_time = " << efi->IC[1].getIgnitionTime();
		}

		if ((cal_ignition & 0x04)) {
			efi->checkSensor();
			efi->IC[2].setIgnitionTime(efi->calculateInjectionTime(efi->CLTSensor.getData(), efi->EGOSensor.getData(),
																   efi->MATSensor.getData(), efi->MAPSensor.getData(), efi->getRPM()));
			cout << "\nCalculate ignition time for cylinder 2: ig_time = " << efi->IC[2].getIgnitionTime();
		}

		if ((cal_ignition & 0x08)) {
			efi->checkSensor();
			efi->IC[3].setIgnitionTime(efi->calculateInjectionTime(efi->CLTSensor.getData(), efi->EGOSensor.getData(),
																   efi->MATSensor.getData(), efi->MAPSensor.getData(), efi->getRPM()));
			cout << "\nCalculate ignition time for cylinder 3: ig_time = " << efi->IC[3].getIgnitionTime();
		}

		// BTDC ready
		for (int i = 0; i < CYLINDERS; i++) {
			if (btdc[i] + 360 / NUM_TEETH > efi->IC[i].getIgnitionTime()) {
				btdc_ready[i] = 1;
			} else {
				btdc_ready[i] = 0;
			}
		}

		u32 data_in;
		for (int i = 0; i < CYLINDERS; i++) {
			data_in |= ((btdc_ready[i] << i) | (done[i] << (i + CYLINDERS)));
		};
		XGpio_DiscreteWrite(&Gpio1, 2);
	}
}
